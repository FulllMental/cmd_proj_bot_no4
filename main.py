import os

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Bot, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler

from layouts import customer_main_menu, speaker_main_menu, admin_main_menu, unregistered_customer_menu, customer_menu, \
    speaker_menu


# TO DO
# –ó–∞–ø—Ä–æ—Å—ã:
#     1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ tg_id –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ user_survey –∫–∞–∫ {'status': 'admin'}, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–æ–º {'status': 'unregistered_customer'} (—Å—Ç—Ä–æ–∫–∞ 45)
#     2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –≤—ã–≤–æ–¥ –≤ –≤–∏–¥–µ str (—Å—Ç—Ä–æ–∫–∞ 106)
#     3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ –≤ –ë–î (—Å—Ç—Ä–æ–∫–∞ 226)
#     4. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î (—Å—Ç—Ä–æ–∫–∞ 243)
#     5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤–º–µ—Å—Ç–µ —Å id) (—Å—Ç—Ä–æ–∫–∞ 275)
#     6. –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª–∏ –æ—Ç–≤–µ—Ç (—É–¥–∞–ª–∏—Ç—å –ø–æ id) (—Å—Ç—Ä–æ–∫–∞ 294)
#     7. –ó–∞–ø—Ä–æ—Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∞–Ω–∫–µ—Ç (—Å—Ç—Ä–æ–∫–∞ 309)
#     8. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ tg_id –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏–∑ –ë–î (–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞) (—Å—Ç—Ä–æ–∫–∞ 329)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç–∞–≤–ª—è–π —Å–≤–æ–π id)
# —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö:
#  'admin'
#  'speaker'
#  'customer'
#  'unregistered_customer'

def check_user(user_id): # + –∑–∞–ø—Ä–æ—Å
    if user_id == 406682076:
        user_survey = {
            'id': 406682076,
            'status': 'admin'
                    }
    else:
        user_survey = {
            'id': 406682076,
            'status': 'customer'
        }
    return user_survey


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def start(update, context):
    user_survey.clear()

    print('–¥–æ', user_survey)

    message = update.message
    user_id = message.from_user.id
    user_survey.update(check_user(user_id))     # –æ–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ

    if user_survey['status'] == 'speaker':
        main_menu = speaker_main_menu
    elif user_survey['status'] == 'admin':
        main_menu = admin_main_menu
    else:
        main_menu = customer_main_menu

    keyboard = ReplyKeyboardMarkup(main_menu, one_time_keyboard=True)
    message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboard)
    print('–ø–æ—Å–ª–µ', user_survey)


def open_speaker_menu(update, context):
    if user_survey['status'] not in ['speaker', 'admin']:
        speaker_menu_text = '‚õîÔ∏è –¢.–∫. –≤—ã –Ω–µ —Å–ø–∏–∫–µ—Ä, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(customer_main_menu, one_time_keyboard=True)
        update.message.reply_text(speaker_menu_text, reply_markup=keyboard)
        return

    speaker_menu_text = '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:'
    keyboard = ReplyKeyboardMarkup(speaker_menu, one_time_keyboard=True)
    update.message.reply_text(speaker_menu_text, reply_markup=keyboard)


def open_customer_menu(update, context):
    if user_survey['status'] not in ['customer', 'speaker', 'admin']:
        customer_keyboard = unregistered_customer_menu
    else:
        customer_keyboard = customer_menu
    keyboard = ReplyKeyboardMarkup(customer_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboard)


def go_back(update, context):
    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboard)


def get_info(update, context):
    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('–î–∞–Ω–Ω—ã–π –±–æ—Ç ü§ñ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π '
                              '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π\n'
                              '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —Ä—É–±—Ä–∏–∫ –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç –≤–æ –≤—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–æ–≤,\n'
                              '–∞ —Ç–∞–∫ –∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n'
                              '–î–∞, –≤—Å—ë —É –≤–∞—Å –≤ –≥–∞–¥–∂–µ—Ç–µ ü§≥',
                              parse_mode='HTML',
                              reply_markup=keyboard)


def get_schedule(update, context):
    menu_pattern = user_survey['status']
    # ‚ùì –î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    # schedule = str([f'{start_time} - {end_time}: {speech}\n{about_speech}' for speech in speeches])
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text(schedule,
                              parse_mode='HTML',
                              reply_markup=keyboard)


def notificate_all(update, context):
    menu_pattern = user_survey['status']
    if menu_pattern != 'admin':
        access_denied = '‚õîÔ∏è –¢.–∫. –≤—ã –Ω–µ –∞–¥–º–∏–Ω, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
        update.message.reply_text(access_denied, reply_markup=keyboard)
        return
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('', reply_markup=keyboard)


# –ó–∞–≥–ª—É—à–∫–∞, —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
def under_construction(update, context):
    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text(
        'üöß –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ –Ω–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üöß',
        reply_markup=keyboard)


def error(update, context):
    print(f'Update {update} caused error {context.error}')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏

def start_polling(update, context):
    if user_survey['status'] != 'unregistered_customer':
        speaker_menu_text = '‚õîÔ∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(customer_main_menu, one_time_keyboard=True)
        update.message.reply_text(speaker_menu_text, reply_markup=keyboard)
        return
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    update.message.reply_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∫–µ—Ç—É! –í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å.\n{QUESTION_1}',
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 1


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
def question_1(update, context):
    global answers
    text = update.message.text
    answers["name"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_2,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 2


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
def question_2(update, context):
    global answers
    text = update.message.text
    answers["age"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_3,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 3


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
def question_3(update, context):
    global answers
    text = update.message.text
    answers["job"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_4,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 4


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å
def question_4(update, context):
    global answers
    text = update.message.text
    answers["stack"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_5,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 5


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
def question_5(update, context):
    global answers
    text = update.message.text
    answers["hobby"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_6,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 6


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å
def question_6(update, context):
    global answers
    text = update.message.text
    answers["purpose"] = text
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(QUESTION_7,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 7


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def question_7(update, context):
    global answers
    text = update.message.text
    answers["region"] = text
    update.message.reply_text('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
                              reply_markup=ReplyKeyboardRemove())
    print(answers)
    # ‚ùì –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    answers = {}
    return ConversationHandler.END


def ask_question(update, context):
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    update.message.reply_text('üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤–µ–¥—É—â–µ–º—É:\n',
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 1


def send_question(update, context):
    question_text = update.message.text

    # ‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print(question_text)
    # –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ø–∏–∫–µ—Ä–∞', reply_markup=keyboard)

    return ConversationHandler.END


def get_admin_text(update, context):
    menu_pattern = user_survey['status']
    if menu_pattern != 'admin':
        speaker_menu_text = '‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
        update.message.reply_text(speaker_menu_text, reply_markup=keyboard)
        return
    reply_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å']]  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    update.message.reply_text('üìù –ù–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n',
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return 1


def answer_question(update, context):
    menu_pattern = user_survey['status']
    if user_survey['status'] != 'speaker':
        speaker_menu_text = '‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
        update.message.reply_text(speaker_menu_text, reply_markup=keyboard)
        return

    # ‚ùì –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    asked_question = '–ß–æ —É –≤–∞—Å —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'
    # –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    question_menu = InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–µ–Ω", callback_data='get_next_question')
    keyboard = [[question_menu]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    bot.send_message(chat_id=update.message.chat_id,
                     text=asked_question,
                     reply_markup=reply_markup)


def get_next_question(update, context):
    chat_id = update.callback_query.message.chat.id
    message_id = update.callback_query.message.message_id
    keyboard = ReplyKeyboardMarkup(speaker_menu, one_time_keyboard=True)
    update.callback_query.message.reply_text('‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–µ–Ω', reply_markup=keyboard)
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    # ‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ë–î –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º

    query = update.callback_query
    query.answer()
    return


def find_interlocutor(update, context):
    menu_pattern = user_survey['status']
    if user_survey['status'] == 'unregistered_customer':
        speaker_menu_text = '‚õîÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π...'
        keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
        update.message.reply_text(speaker_menu_text, reply_markup=keyboard)
        return

    # ‚ùì –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –ë–î –ø–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É —á–∏—Å–ª—É
    customer_form = {'tg_nick': '@Fulllmental', 'name': '–ê—Ä—Å–µ–Ω–∏–π', 'age': '15', 'job': '–õ–æ–±–æ—Ç—Ä—è—Å', 'stack': '–ü–∏—Ç–æ–Ω', 'hobby': '–ò–≥—Ä–∞ –Ω–∞ –Ω–µ—Ä–≤–∞—Ö', 'purpose': '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É', 'region': '–ú–æ—Å–∫–≤–∞'}
    # –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    promo_form = f'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–µ–Ω—è –∑–æ–≤—É—Ç {customer_form["name"]}\n' \    
                 f'<b>–º–Ω–µ</b> {customer_form["age"]}, –æ–±—ã—á–Ω–æ —è: {customer_form["job"]}\n' \
                 f'<b>—Ö–æ–±–±–∏</b>: {customer_form["hobby"]}\n' \
                 f'<b>—Å—Ç—ç–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</b>: {customer_form["stack"]}\n' \
                 f'<b>—Ü–µ–ª—å</b> –æ–±—â–µ–Ω–∏—è: {customer_form["purpose"]}\n' \
                 f'<b>—Ä–µ–≥–∏–æ–Ω</b>: {customer_form["region"]}\n<b>–∫–æ–Ω—Ç–∞–∫—Ç</b>: {customer_form["tg_nick"]}'
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    bot.send_message(chat_id=update.message.chat_id,
                     text=promo_form,
                     parse_mode='HTML',
                     reply_markup=keyboard)


def send_announcement(update, context):
    announcement_text = update.message.text

    # ‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ë–î –≤ —Å–ø–∏—Å–æ–∫ user_ids
    print(announcement_text)
    user_ids = [406682076]
    # –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    for user_id in user_ids:
        bot.send_message(chat_id=user_id, text=announcement_text)

    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞', reply_markup=keyboard)

    return ConversationHandler.END


# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
def cancel(update, context):
    menu_pattern = user_survey['status']
    keyboard = ReplyKeyboardMarkup(menu_patterns[menu_pattern], one_time_keyboard=True)
    update.message.reply_text('‚ùå –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω ‚ùå', reply_markup=keyboard)

    # –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
    global answers
    answers = {}

    return ConversationHandler.END


if __name__ == '__main__':
    answers = {}
    user_survey = {}
    menu_patterns = {'admin': admin_main_menu,
                     'speaker': speaker_main_menu,
                     'customer': customer_main_menu,
                     'unregistered_customer': customer_main_menu}

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
    QUESTION_1 = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:'
    QUESTION_2 = '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?'
    QUESTION_3 = '–ö–∞–∫–æ–π –≤–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?'
    QUESTION_4 = '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å—Ç—ç–∫–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?'
    QUESTION_5 = '–ö–∞–∫–æ–µ —É –≤–∞—Å —Ö–æ–±–±–∏?'
    QUESTION_6 = '–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?'
    QUESTION_7 = '–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?'

    registration = ConversationHandler(
        entry_points=[MessageHandler(Filters.text('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É'), start_polling)],
        states={
            1: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_1)],
            2: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_2)],
            3: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_3)],
            4: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_4)],
            5: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_5)],
            6: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_6)],
            7: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, question_7)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    question_to_speaker = ConversationHandler(
        entry_points=[MessageHandler(Filters.text('‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), ask_question)],
        states={
            1: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, send_question)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    mass_sending = ConversationHandler(
        entry_points=[MessageHandler(Filters.text('üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞'), get_admin_text)],
        states={
            1: [MessageHandler(Filters.regex('^(–û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
                MessageHandler(Filters.text, send_announcement)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    load_dotenv()
    tg_token = os.getenv('TELEGRAM_BOT_TOKEN')
    updater = Updater(tg_token)
    bot = Bot(tg_token)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))

    dispatcher.add_handler(MessageHandler(Filters.text('üé§ –ú–µ–Ω—é –¥–æ–∫–ª–∞–¥—á–∏–∫–∞'), open_speaker_menu))
    dispatcher.add_handler(MessageHandler(Filters.text('ü§ì –ú–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞'), open_customer_menu))
    dispatcher.add_handler(MessageHandler(Filters.text('‚ùì –ß–∞–í–æ'), get_info))
    dispatcher.add_handler(MessageHandler(Filters.text('üïú –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'), get_info))
    dispatcher.add_handler(MessageHandler(Filters.text('üëã –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'), find_interlocutor))
    dispatcher.add_handler(MessageHandler(Filters.text('üëà –ù–∞–∑–∞–¥'), go_back))

    dispatcher.add_handler(registration)
    dispatcher.add_handler(question_to_speaker)
    dispatcher.add_handler(mass_sending)

    dispatcher.add_handler(MessageHandler(Filters.text('‚ú® –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å'), answer_question))
    dispatcher.add_handler(CallbackQueryHandler(get_next_question, pattern='^get_next_question$'))

    # –¥–æ–¥–µ–ª–∞—Ç—å
    dispatcher.add_handler(MessageHandler(Filters.text('üí∏ –î–æ–Ω–∞—Ç'), under_construction))

    dispatcher.add_error_handler(error)
    updater.start_polling()
